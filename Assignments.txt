Morning Assignment Day Three
============================
1) Assumes you have the latest class_3808.  Team -> pull or Team -> Fetch Upstream
2) Switch to the class_3808 branch  
3) Create a new working branch: Team -> SwitchTo -> NewBranch and name it self_lab
4) Create @HEAD method support for /chirps/{username}/{id} that shares code with @GET similar to user
5) Implement self link element in a ChirpRepresentation
6) Commit locally. 

Homework Assignment Day Two
===============================
1) Assumes you have the latest class_3808.  Team -> pull or Team -> Fetch Upstream
2) Switch to the class_3808 branch  
3) Create a new working branch: Team -> SwitchTo -> NewBranch and name it head_lab
4) Implement @HEAD support for //chirps/{username}/{id} and //users/{username}.
   a) think about reuse between the @GET and @HEAD code within the resource
   b) do not implement @HEAD responses for collections of chirps and users
   c) test cases for head are optional
5) Implement @GET for //users and test through POSTMAN. 
   a) do not implement a test case yet.
6) Commit locally 


Afternoon Day Two Assignment
=========================
1) Assumes you have the latest class_3808.  Team -> pull or Team -> Fetch Upstream
2) Switch to the class_3808 branch  
3) Create a new working branch: Team -> SwitchTo -> NewBranch and name it chirp_reps_lab
4) Create a representation class for chirps and annotate for XML and JSON conversion.
   a) do not include the user
   b) represent the id a string and do not use the nested ChirpId class or representation for it. 
5) Create a ChipResource class that creates and returns a chirps for a user. 
   create URI =>  chirps/{username}
   getall URI =>  chirps/{username}
   get URI => chrips/{username}/{id}
6) Test using POSTMAN
7) Add a negative case for user not found.  
7) Commit locally.


Lunch Day Two Assignment
=========================
1) Assumes you have the latest class_3808.  Team -> pull or Team -> Fetch Upstream
2) Switch to the class_3808 branch  
3) Create a new working branch: Team -> SwitchTo -> NewBranch and name it exception_mapper_lab
4) Create a test to verify creating the same user twice fails with a 403.
5) Create a new exception_mapper for NoSuchEntityException and map it to a 404 response code
7) Commit locally.



End of Day One Assignment
=========================
1) Assumes you have the latest class_3808.  Team -> pull or Team -> Fetch Upstream
2) Switch to the class_3808 branch  
3) Create a new working branch: Team -> SwitchTo -> NewBranch and name it user_create_testcase
4) Create a UserResourceTest class.
5) Create a test case to create a user.
6) Verify status code 201 is returned. 
7) Commit locally.